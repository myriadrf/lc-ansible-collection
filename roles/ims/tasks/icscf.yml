- name: Ensure I-CSCF configuration directory exists
  ansible.builtin.file:
    path: '{{ ims_icscf_config_dir }}'
    state: directory
    mode: '0755'
  tags: 
    - config
- name: Install stock I-CSCF configuration
  ansible.builtin.copy:
    src: 'icscf/'
    dest: '{{ ims_icscf_config_dir }}'
    owner: root
    group: root
    mode: '0644'
  tags:
    - config
- name: Install generated I-CSCF configuration
  ansible.builtin.template:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    owner: root
    group: root
    mode: '0644'
  loop:
    - { src: 'icscf/icscf.cfg.j2', dest: '{{ ims_icscf_config_dir }}/icscf.cfg' }
    - { src: 'icscf/icscf.xml.j2', dest: '{{ ims_icscf_config_dir }}/icscf.xml' }
  tags:
    - config
- name: Set up I-CSCF MySQL database if not present
  block:    
    - name: Create I-CSCF database
      community.mysql.mysql_db:
        name: icscf
        state: present
    - name: Copy SQL dump to the target host
      ansible.builtin.copy:
        src: 'sql/icscf.sql'
        dest: '/tmp/lcsql/icscf/'
        owner: root
        group: root
        mode: '0644'
    - name: Restore I-CSCF data
      community.mysql.mysql_db:
        name: icscf
        state: import
        target: /tmp/lcsql/icscf/icscf.sql
  when: "'icscf' not in db_info.databases"
  tags:
    - db
- name: Create I-CSCF MySQL user if not present
  community.mysql.mysql_user:
    state: present
    name: 'icscf'
    host: '{{ ims_icscf_bind_addr }}'
    plugin: caching_sha2_password
    plugin_auth_string: '{{ ims_icscf_mysql_password }}'
    priv: 'icscf.*: ALL'
  when: db_info.users_info | selectattr('name', 'equalto', 'icscf') | list | length == 0
  tags:
    - db
- name: Check IMS domain is configured in I-CSCF db
  community.mysql.mysql_query:
    login_db: icscf
    query: "SELECT count(*) FROM nds_trusted_domains WHERE trusted_domain='{{ ims_domain }}'"
  register: check_icscf_db_domain
  tags:
    - db
- name: Set up IMS domain in I-CSCF db if not present
  community.mysql.mysql_query:
    login_db: icscf
    query: "INSERT INTO nds_trusted_domains (trusted_domain) VALUES ('{{ ims_domain }}')"
  when: check_icscf_db_domain.query_result[0][0]['count(*)'] == 0
  tags:
    - db
- name: Check S-CSCF URI is configured in db
  community.mysql.mysql_query:
    login_db: icscf
    query: "SELECT count(*) FROM s_cscf WHERE s_cscf_uri='sip:scscf.{{ ims_domain }}:6060'"
  register: check_icscf_db_uri
  tags:
    - db
- name: Set up S-CSCF URI in db if not present
  community.mysql.mysql_query:
    login_db: icscf
    query: "INSERT INTO s_cscf (name, s_cscf_uri) VALUES ('First and only S-CSCF', 'sip:scscf.{{ ims_domain }}:6060')"
  when: check_icscf_db_uri.query_result[0][0]['count(*)'] == 0
  tags:
    - db
- name: Check S-CSCF capabilities are configured in db
  block:
    - name: Query db for S-CSCF ID
      community.mysql.mysql_query:
        login_db: icscf
        query: "SELECT id FROM s_cscf WHERE s_cscf_uri='sip:scscf.{{ ims_domain }}:6060' LIMIT 1"
      register: scscf_id_raw
    - name: Parse results and set fact scscf_id
      set_fact:
        scscf_id: "{{ scscf_id_raw.query_result[0][0].id }}"
    - name: Check S-CSCF capabilities for scscf_id are configured in db
      community.mysql.mysql_query:
        login_db: icscf
        query: "SELECT count(*) FROM s_cscf_capabilities WHERE id_s_cscf='{{ scscf_id }}'"
      register: check_icscf_db_cap
  tags:
  - db
- name: Set up S-CSCF capabilities in db if not present
  community.mysql.mysql_query:
    login_db: icscf
    query: "INSERT INTO s_cscf_capabilities (id_s_cscf, capability) VALUES ('{{ scscf_id }}', 0),('{{ scscf_id }}', 1);"
  when: check_icscf_db_cap.query_result[0][0]['count(*)'] == 0
  tags:
    - db
- name: Create I-CSCF container
  community.docker.docker_container:
    name: lc-icscf
    image: myriadrf/kamailio:{{ ims_kamailio_version }}
    pull: yes
    state: started
    restart: yes
    restart_policy: always
    env:
      COMPONENT_NAME: icscf-1
    networks:
      - name: lc
        ipv4_address: '{{ ims_icscf_bind_addr }}'
    dns_servers:
      - '{{ ims_dns_addr }}'
    expose:
      - "3869/udp"
      - "3869/tcp"
      - "4060/udp"
      - "4060/tcp"
    volumes:
      - /etc/lc/kamailio_icscf:/etc/lc/kamailio_icscf:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
  tags:
    - container
